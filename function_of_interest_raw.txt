static Lisp_Object
arith_driver (enum arithop code, ptrdiff_t nargs, Lisp_Object *args)
{
  Lisp_Object val;
  ptrdiff_t argnum, ok_args;
  EMACS_INT accum = 0;
  EMACS_INT next, ok_accum;
  bool overflow = 0;

  switch (code)
    {
    case Alogior:
    case Alogxor:
    case Aadd:
    case Asub:
      accum = 0;
      break;
    case Amult:
      accum = 1;
      break;
    case Alogand:
      accum = -1;
      break;
    default:
      break;
    }

  for (argnum = 0; argnum < nargs; argnum++)
    {
      if (! overflow)
	{
	  ok_args = argnum;
	  ok_accum = accum;
	}

      /* Using args[argnum] as argument to CHECK_NUMBER_... */
      val = args[argnum];
      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

      if (FLOATP (val))
	return float_arith_driver (ok_accum, ok_args, code,
				   nargs, args);
      args[argnum] = val;
      next = XINT (args[argnum]);
      switch (code)
	{
	case Aadd:
	  if (INT_ADD_OVERFLOW (accum, next))
	    {
	      overflow = 1;
	      accum &= INTMASK;
	    }
	  accum += next;
	  break;
	case Asub:
	  if (INT_SUBTRACT_OVERFLOW (accum, next))
	    {
	      overflow = 1;
	      accum &= INTMASK;
	    }
	  accum = argnum ? accum - next : nargs == 1 ? - next : next;
	  break;
	case Amult:
	  if (INT_MULTIPLY_OVERFLOW (accum, next))
	    {
	      EMACS_UINT a = accum, b = next, ab = a * b;
	      overflow = 1;
	      accum = ab & INTMASK;
	    }
	  else
	    accum *= next;
	  break;
	case Adiv:
	  if (!argnum)
	    accum = next;
	  else
	    {
	      if (next == 0)
		xsignal0 (Qarith_error);
	      accum /= next;
	    }
	  break;
	case Alogand:
	  accum &= next;
	  break;
	case Alogior:
	  accum |= next;
	  break;
	case Alogxor:
	  accum ^= next;
	  break;
	case Amax:
	  if (!argnum || next > accum)
	    accum = next;
	  break;
	case Amin:
	  if (!argnum || next < accum)
	    accum = next;
	  break;
	}
    }

  XSETINT (val, accum);
  return val;
}
